Index: app/src/main/java/com/ss_team_1/koibitoshuuchuu/presentation/components/Character_intimacy_level.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ss_team_1.koibitoshuuchuu.presentation.components\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.Canvas\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.Button\r\nimport androidx.compose.material.ButtonDefaults\r\nimport androidx.compose.material.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.MutableState\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Alignment.Companion.Center\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.*\r\nimport androidx.compose.ui.graphics.drawscope.Stroke\r\nimport androidx.compose.ui.graphics.drawscope.drawIntoCanvas\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport com.ss_team_1.koibitoshuuchuu.R\r\n//import com.ss_team_1.koibitoshuuchuu.presentation.StrokeText\r\nimport com.ss_team_1.koibitoshuuchuu.ui.theme.mamelonFamily\r\n\r\n@Composable\r\nfun characterIntimacyLevel(\r\n    intimacyLevel: Int\r\n){\r\n    Box(\r\n        modifier = Modifier.size(40.dp)\r\n    ){\r\n        Image(\r\n            painter = painterResource(id = R.drawable.heart_intimacy),\r\n            contentDescription = \"\",\r\n            contentScale = ContentScale.Crop,\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n        )\r\n        Text(\r\n            text = \"$intimacyLevel\",\r\n            modifier = Modifier.align(Center),\r\n            fontSize = 20.sp,\r\n            fontFamily = mamelonFamily,\r\n            fontWeight = FontWeight.Normal,\r\n            color = Color(0xFFFFFFFF)\r\n        )\r\n    }\r\n}\r\n\r\n@Preview(showBackground = false)\r\n@Composable\r\nfun heartpreview(){\r\n    characterIntimacyLevel(1)\r\n}\r\n\r\n@Composable\r\nfun intimacyBar(\r\n    intimacy: Int,\r\n    levelIntimacyNeed: Int\r\n){\r\n    val percentage = intimacy.toFloat()/levelIntimacyNeed.toFloat()\r\n    val  showPercentage: MutableState<Boolean> =\r\n        remember { mutableStateOf(false) }\r\n    Box(\r\n        modifier = Modifier\r\n            .size(248.dp, 46.dp)\r\n            .clickable(\r\n                enabled = true,\r\n                onClickLabel = \"check percentage\",\r\n                onClick = {\r\n                    showPercentage.value = !showPercentage.value\r\n                }\r\n            )\r\n    ){\r\n        Image(\r\n            painter = painterResource(id = R.drawable.intimacy_bar_outerframe),\r\n            contentDescription = \"\",\r\n            contentScale = ContentScale.Crop,\r\n            modifier = Modifier\r\n                .padding(16.dp)\r\n                .fillMaxWidth()\r\n        )\r\n        LevelbarRectangle(percentage)\r\n        if(showPercentage.value){\r\n            Row(modifier = Modifier\r\n                .fillMaxWidth()) {\r\n                percentageLabel(\r\n                    percentage\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n@Composable\r\nfun percentageLabel(\r\n    percentage: Float,\r\n    modifier: Modifier=Modifier\r\n){\r\n    val percent = (percentage*100).toInt()\r\n    Box(\r\n        modifier = modifier.size(56.dp,32.dp)\r\n            .absoluteOffset(((percentage*190).toInt()).dp,0.dp)\r\n    ){\r\n        Image(\r\n            painter = painterResource(id = R.drawable.label_shape),\r\n            contentDescription = \"\",\r\n            contentScale = ContentScale.Crop,\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n        )\r\n        Text(\r\n            text = \"$percent%\",\r\n            modifier = Modifier.align(Center),\r\n            fontSize = 20.sp,\r\n            fontFamily = mamelonFamily,\r\n            fontWeight = FontWeight.Normal,\r\n            color = Color(0xFFFFFFFF)\r\n        )\r\n    }\r\n}\r\n@Preview(showBackground = false)\r\n@Composable\r\nfun labelpreview(){\r\n    percentageLabel(0.444f)\r\n}\r\n@Composable\r\nfun LevelbarRectangle(\r\n    percentage : Float\r\n) {\r\n\r\n    Canvas(\r\n        modifier = Modifier.fillMaxSize()\r\n    ) {\r\n        val rectanglePath = Path().apply {\r\n            val height = size.height\r\n            moveTo(92f, height/(2.0f)-8f)//92f為起始點\r\n            lineTo(92f+ (500f*percentage), height/(2.0f)-8f)//592f為終點\r\n            lineTo(92f+ (500f*percentage), height/(2.0f)+8f)\r\n            lineTo(92f, height/(2.0f)+8f)\r\n        }\r\n        drawPath(\r\n            rectanglePath ,\r\n            color =  Color(0xfff8bbd0)\r\n        )\r\n    }\r\n}\r\n@Preview(showBackground = false)\r\n@Composable\r\nfun intimacybarpreview(){\r\n    intimacyBar(900,1314)\r\n}\r\n\r\n@Composable\r\nfun ButtonWithBorder(\r\n    lock: Boolean\r\n) {\r\n    if(lock){\r\n        Button(\r\n            onClick = {\r\n                /*TODO*/\r\n            },\r\n            border = BorderStroke(3.dp, Color.White),\r\n            modifier = Modifier.size(48.dp),\r\n            shape = RoundedCornerShape(14.dp),\r\n            colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xffC4C4C4))//調灰階\r\n        ) {\r\n            Image(\r\n                painterResource(id = R.drawable.ic_info_of_figure),\r\n                contentDescription =\"figure info button icon\",\r\n                modifier = Modifier.size(24.dp),\r\n                colorFilter = ColorFilter.tint(Color(0xff979797))//調灰階\r\n            )\r\n        }\r\n    }\r\n    else{\r\n        Button(\r\n            onClick = {\r\n                /*TODO*/\r\n            },\r\n            border = BorderStroke(3.dp, Color.White),\r\n            modifier = Modifier.size(48.dp),\r\n            shape = RoundedCornerShape(14.dp),\r\n            colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xff94e7e1))\r\n        ) {\r\n            Image(\r\n                painterResource(id = R.drawable.ic_info_of_figure),\r\n                contentDescription =\"figure info button icon\",\r\n                modifier = Modifier.size(24.dp)\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n@Preview(showBackground = false)\r\n@Composable\r\nfun charcaterInfopreview(){\r\n    ButtonWithBorder(true)\r\n}\r\n\r\n@Composable\r\nfun FocusButton(\r\n    context: Context,\r\n    lock: Boolean,\r\n    navController: NavController = NavController(LocalContext.current)\r\n){\r\n    Box(\r\n        Modifier\r\n            .size(216.dp,66.dp)\r\n\r\n    ) {\r\n        if(lock){\r\n            Image(\r\n                painter = painterResource(id = R.drawable.focus_button_unlock),\r\n                contentDescription = \"\",\r\n                contentScale = ContentScale.Fit,\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .clickable (\r\n                        enabled = true,\r\n                        onClickLabel = \"unlock click\",\r\n                        onClick = {\r\n                            /*TODO*/\r\n                            navController.navigate(\"focusintropage\")\r\n                        }\r\n                    )\r\n            )\r\n        }else{\r\n            Image(\r\n                painter = painterResource(id = R.drawable.focus_button),\r\n                contentDescription = \"\",\r\n                contentScale = ContentScale.Fit,\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .clickable (\r\n                        enabled = true,\r\n                        onClickLabel = \"focus click\",\r\n                        onClick = {\r\n                            navController.navigate(\"focusintropage\")\r\n                        }\r\n                    )\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n}\r\n@Preview\r\n@Composable\r\nfun FocusButtonPreview(){\r\n    FocusButton(LocalContext.current,true)\r\n}\r\n/*@SuppressLint(\"NewApi\")\r\n@Composable\r\nfun ButtonStrokeText(context: Context, string: String, x: Float, y: Int, size: Float){\r\nval customTypeface = context.resources.getFont(R.font.mamelon)\r\n\r\nval textPaintStroke = Paint().asFrameworkPaint().apply {\r\n    isAntiAlias = true\r\n    style = android.graphics.Paint.Style.STROKE\r\n    textSize = size\r\n    color = (0xff09756D).toInt()\r\n    strokeWidth = size/20f\r\n    strokeMiter= size/20f\r\n    strokeJoin = android.graphics.Paint.Join.ROUND\r\n    typeface = customTypeface\r\n}\r\n\r\nval textPaint = Paint().asFrameworkPaint().apply {\r\n    isAntiAlias = true\r\n    style = android.graphics.Paint.Style.FILL\r\n    textSize = size\r\n    color = (0xff09756D).toInt()\r\n    typeface = customTypeface\r\n}\r\nCanvas(\r\n    modifier = Modifier.fillMaxSize(),\r\n    onDraw = {\r\n        drawIntoCanvas {\r\n            it.nativeCanvas.drawText(\r\n                string,\r\n                x,\r\n                y.dp.toPx(),\r\n                textPaintStroke\r\n            )\r\n            it.nativeCanvas.drawText(\r\n                string,\r\n                x,\r\n                y.dp.toPx(),\r\n                textPaint\r\n            )\r\n        }\r\n    }\r\n)\r\n}*/\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/ss_team_1/koibitoshuuchuu/presentation/components/Character_intimacy_level.kt b/app/src/main/java/com/ss_team_1/koibitoshuuchuu/presentation/components/Character_intimacy_level.kt
--- a/app/src/main/java/com/ss_team_1/koibitoshuuchuu/presentation/components/Character_intimacy_level.kt	(revision 9cbf70b92aef1a9c3e99c8435bf7707a2c673712)
+++ b/app/src/main/java/com/ss_team_1/koibitoshuuchuu/presentation/components/Character_intimacy_level.kt	(date 1654781346494)
@@ -30,6 +30,7 @@
 import androidx.compose.ui.unit.sp
 import androidx.navigation.NavController
 import com.ss_team_1.koibitoshuuchuu.R
+import com.ss_team_1.koibitoshuuchuu.presentation.Page
 //import com.ss_team_1.koibitoshuuchuu.presentation.StrokeText
 import com.ss_team_1.koibitoshuuchuu.ui.theme.mamelonFamily
 
@@ -187,6 +188,7 @@
         Button(
             onClick = {
                 /*TODO*/
+
             },
             border = BorderStroke(3.dp, Color.White),
             modifier = Modifier.size(48.dp),
@@ -231,7 +233,7 @@
                         onClickLabel = "unlock click",
                         onClick = {
                             /*TODO*/
-                            navController.navigate("focusintropage")
+                            navController.navigate(Page.FocusIntro.route)
                         }
                     )
             )
@@ -246,7 +248,7 @@
                         enabled = true,
                         onClickLabel = "focus click",
                         onClick = {
-                            navController.navigate("focusintropage")
+                            navController.navigate(Page.FocusIntro.route)
                         }
                     )
             )
